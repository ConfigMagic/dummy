// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: env.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvService_GetEnvConfig_FullMethodName    = "/env.EnvService/GetEnvConfig"
	EnvService_ListEnvConfigs_FullMethodName  = "/env.EnvService/ListEnvConfigs"
	EnvService_ApplyEnvConfig_FullMethodName  = "/env.EnvService/ApplyEnvConfig"
	EnvService_DeleteEnvConfig_FullMethodName = "/env.EnvService/DeleteEnvConfig"
)

// EnvServiceClient is the client API for EnvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvServiceClient interface {
	GetEnvConfig(ctx context.Context, in *EnvRequest, opts ...grpc.CallOption) (*EnvConfig, error)
	ListEnvConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EnvList, error)
	ApplyEnvConfig(ctx context.Context, in *EnvConfig, opts ...grpc.CallOption) (*EnvConfig, error)
	DeleteEnvConfig(ctx context.Context, in *EnvRequest, opts ...grpc.CallOption) (*Empty, error)
}

type envServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvServiceClient(cc grpc.ClientConnInterface) EnvServiceClient {
	return &envServiceClient{cc}
}

func (c *envServiceClient) GetEnvConfig(ctx context.Context, in *EnvRequest, opts ...grpc.CallOption) (*EnvConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvConfig)
	err := c.cc.Invoke(ctx, EnvService_GetEnvConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envServiceClient) ListEnvConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EnvList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvList)
	err := c.cc.Invoke(ctx, EnvService_ListEnvConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envServiceClient) ApplyEnvConfig(ctx context.Context, in *EnvConfig, opts ...grpc.CallOption) (*EnvConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvConfig)
	err := c.cc.Invoke(ctx, EnvService_ApplyEnvConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envServiceClient) DeleteEnvConfig(ctx context.Context, in *EnvRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, EnvService_DeleteEnvConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvServiceServer is the server API for EnvService service.
// All implementations must embed UnimplementedEnvServiceServer
// for forward compatibility.
type EnvServiceServer interface {
	GetEnvConfig(context.Context, *EnvRequest) (*EnvConfig, error)
	ListEnvConfigs(context.Context, *Empty) (*EnvList, error)
	ApplyEnvConfig(context.Context, *EnvConfig) (*EnvConfig, error)
	DeleteEnvConfig(context.Context, *EnvRequest) (*Empty, error)
	mustEmbedUnimplementedEnvServiceServer()
}

// UnimplementedEnvServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvServiceServer struct{}

func (UnimplementedEnvServiceServer) GetEnvConfig(context.Context, *EnvRequest) (*EnvConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvConfig not implemented")
}
func (UnimplementedEnvServiceServer) ListEnvConfigs(context.Context, *Empty) (*EnvList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvConfigs not implemented")
}
func (UnimplementedEnvServiceServer) ApplyEnvConfig(context.Context, *EnvConfig) (*EnvConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyEnvConfig not implemented")
}
func (UnimplementedEnvServiceServer) DeleteEnvConfig(context.Context, *EnvRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvConfig not implemented")
}
func (UnimplementedEnvServiceServer) mustEmbedUnimplementedEnvServiceServer() {}
func (UnimplementedEnvServiceServer) testEmbeddedByValue()                    {}

// UnsafeEnvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvServiceServer will
// result in compilation errors.
type UnsafeEnvServiceServer interface {
	mustEmbedUnimplementedEnvServiceServer()
}

func RegisterEnvServiceServer(s grpc.ServiceRegistrar, srv EnvServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvService_ServiceDesc, srv)
}

func _EnvService_GetEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServiceServer).GetEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvService_GetEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServiceServer).GetEnvConfig(ctx, req.(*EnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvService_ListEnvConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServiceServer).ListEnvConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvService_ListEnvConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServiceServer).ListEnvConfigs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvService_ApplyEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServiceServer).ApplyEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvService_ApplyEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServiceServer).ApplyEnvConfig(ctx, req.(*EnvConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvService_DeleteEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServiceServer).DeleteEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvService_DeleteEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServiceServer).DeleteEnvConfig(ctx, req.(*EnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvService_ServiceDesc is the grpc.ServiceDesc for EnvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "env.EnvService",
	HandlerType: (*EnvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvConfig",
			Handler:    _EnvService_GetEnvConfig_Handler,
		},
		{
			MethodName: "ListEnvConfigs",
			Handler:    _EnvService_ListEnvConfigs_Handler,
		},
		{
			MethodName: "ApplyEnvConfig",
			Handler:    _EnvService_ApplyEnvConfig_Handler,
		},
		{
			MethodName: "DeleteEnvConfig",
			Handler:    _EnvService_DeleteEnvConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "env.proto",
}
